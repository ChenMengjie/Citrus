// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// EvaluateSimilarity
NumericVector EvaluateSimilarity(NumericMatrix Mat, NumericVector cluster);
RcppExport SEXP Citrus_EvaluateSimilarity(SEXP MatSEXP, SEXP clusterSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type Mat(MatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cluster(clusterSEXP);
    __result = Rcpp::wrap(EvaluateSimilarity(Mat, cluster));
    return __result;
END_RCPP
}
// sampleFromMND
arma::mat sampleFromMND(int n, int p, arma::mat M, arma::mat U, arma::mat V);
RcppExport SEXP Citrus_sampleFromMND(SEXP nSEXP, SEXP pSEXP, SEXP MSEXP, SEXP USEXP, SEXP VSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type U(USEXP);
    Rcpp::traits::input_parameter< arma::mat >::type V(VSEXP);
    __result = Rcpp::wrap(sampleFromMND(n, p, M, U, V));
    return __result;
END_RCPP
}
// riwishart
arma::mat riwishart(int nu, arma::mat V);
RcppExport SEXP Citrus_riwishart(SEXP nuSEXP, SEXP VSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type V(VSEXP);
    __result = Rcpp::wrap(riwishart(nu, V));
    return __result;
END_RCPP
}
// dmvnrmArma
arma::vec dmvnrmArma(arma::mat x, arma::rowvec mean, arma::mat sigma, bool logd);
RcppExport SEXP Citrus_dmvnrmArma(SEXP xSEXP, SEXP meanSEXP, SEXP sigmaSEXP, SEXP logdSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type logd(logdSEXP);
    __result = Rcpp::wrap(dmvnrmArma(x, mean, sigma, logd));
    return __result;
END_RCPP
}
// dmvnrmRowArma
double dmvnrmRowArma(arma::rowvec x, arma::rowvec mean, arma::mat sigma, bool logd);
RcppExport SEXP Citrus_dmvnrmRowArma(SEXP xSEXP, SEXP meanSEXP, SEXP sigmaSEXP, SEXP logdSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::rowvec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type logd(logdSEXP);
    __result = Rcpp::wrap(dmvnrmRowArma(x, mean, sigma, logd));
    return __result;
END_RCPP
}
// mvrnormArma
arma::rowvec mvrnormArma(arma::rowvec mu, arma::mat sigma);
RcppExport SEXP Citrus_mvrnormArma(SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::rowvec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    __result = Rcpp::wrap(mvrnormArma(mu, sigma));
    return __result;
END_RCPP
}
// callpois
double callpois(int x, double alpha, bool log);
RcppExport SEXP Citrus_callpois(SEXP xSEXP, SEXP alphaSEXP, SEXP logSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< bool >::type log(logSEXP);
    __result = Rcpp::wrap(callpois(x, alpha, log));
    return __result;
END_RCPP
}
// harmonic
double harmonic(int q);
RcppExport SEXP Citrus_harmonic(SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    __result = Rcpp::wrap(harmonic(q));
    return __result;
END_RCPP
}
// colmean
arma::rowvec colmean(arma::mat x);
RcppExport SEXP Citrus_colmean(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    __result = Rcpp::wrap(colmean(x));
    return __result;
END_RCPP
}
// callKmeans
arma::vec callKmeans(arma::mat x, int k);
RcppExport SEXP Citrus_callKmeans(SEXP xSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    __result = Rcpp::wrap(callKmeans(x, k));
    return __result;
END_RCPP
}
// Cquantile
double Cquantile(arma::vec x, double q);
RcppExport SEXP Citrus_Cquantile(SEXP xSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    __result = Rcpp::wrap(Cquantile(x, q));
    return __result;
END_RCPP
}
// fastInverse
arma::mat fastInverse(arma::mat psi, arma::mat lambda, bool diag);
RcppExport SEXP Citrus_fastInverse(SEXP psiSEXP, SEXP lambdaSEXP, SEXP diagSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< bool >::type diag(diagSEXP);
    __result = Rcpp::wrap(fastInverse(psi, lambda, diag));
    return __result;
END_RCPP
}
// initialize_lambda
arma::mat initialize_lambda(arma::mat Z_norm, arma::mat X);
RcppExport SEXP Citrus_initialize_lambda(SEXP Z_normSEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type Z_norm(Z_normSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    __result = Rcpp::wrap(initialize_lambda(Z_norm, X));
    return __result;
END_RCPP
}
// reorderMatF
arma::uvec reorderMatF(arma::mat F);
RcppExport SEXP Citrus_reorderMatF(SEXP FSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type F(FSEXP);
    __result = Rcpp::wrap(reorderMatF(F));
    return __result;
END_RCPP
}
// logratio
double logratio(int active, int q);
RcppExport SEXP Citrus_logratio(SEXP activeSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type active(activeSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    __result = Rcpp::wrap(logratio(active, q));
    return __result;
END_RCPP
}
// subsetMat
arma::mat subsetMat(arma::mat X, arma::uvec neworder, bool byrow);
RcppExport SEXP Citrus_subsetMat(SEXP XSEXP, SEXP neworderSEXP, SEXP byrowSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type neworder(neworderSEXP);
    Rcpp::traits::input_parameter< bool >::type byrow(byrowSEXP);
    __result = Rcpp::wrap(subsetMat(X, neworder, byrow));
    return __result;
END_RCPP
}
// initilizationIBP
Rcpp::List initilizationIBP(arma::mat X, int k);
RcppExport SEXP Citrus_initilizationIBP(SEXP XSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    __result = Rcpp::wrap(initilizationIBP(X, k));
    return __result;
END_RCPP
}
// PLSinitilizationIBP
Rcpp::List PLSinitilizationIBP(arma::mat Y, arma::mat X, int k1, int k2);
RcppExport SEXP Citrus_PLSinitilizationIBP(SEXP YSEXP, SEXP XSEXP, SEXP k1SEXP, SEXP k2SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type k1(k1SEXP);
    Rcpp::traits::input_parameter< int >::type k2(k2SEXP);
    __result = Rcpp::wrap(PLSinitilizationIBP(Y, X, k1, k2));
    return __result;
END_RCPP
}
// DirichletSpikeModel
Rcpp::List DirichletSpikeModel(arma::mat X, int K, int iniL, int TruncateL, int iter, int nu0, double sigma, double r, double s, double alpha, arma::rowvec mu0, arma::mat Sigma0, int kappa0, double m, double g, double h, double c, double d, double s1, double s2, int iter_to_average);
RcppExport SEXP Citrus_DirichletSpikeModel(SEXP XSEXP, SEXP KSEXP, SEXP iniLSEXP, SEXP TruncateLSEXP, SEXP iterSEXP, SEXP nu0SEXP, SEXP sigmaSEXP, SEXP rSEXP, SEXP sSEXP, SEXP alphaSEXP, SEXP mu0SEXP, SEXP Sigma0SEXP, SEXP kappa0SEXP, SEXP mSEXP, SEXP gSEXP, SEXP hSEXP, SEXP cSEXP, SEXP dSEXP, SEXP s1SEXP, SEXP s2SEXP, SEXP iter_to_averageSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type iniL(iniLSEXP);
    Rcpp::traits::input_parameter< int >::type TruncateL(TruncateLSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< int >::type nu0(nu0SEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sigma0(Sigma0SEXP);
    Rcpp::traits::input_parameter< int >::type kappa0(kappa0SEXP);
    Rcpp::traits::input_parameter< double >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< double >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< int >::type iter_to_average(iter_to_averageSEXP);
    __result = Rcpp::wrap(DirichletSpikeModel(X, K, iniL, TruncateL, iter, nu0, sigma, r, s, alpha, mu0, Sigma0, kappa0, m, g, h, c, d, s1, s2, iter_to_average));
    return __result;
END_RCPP
}
// IBPfactormodel
Rcpp::List IBPfactormodel(arma::mat X, int numk, int iter, double sigma, double alpha, double kappa, double g, double h, double c, double d, int limit);
RcppExport SEXP Citrus_IBPfactormodel(SEXP XSEXP, SEXP numkSEXP, SEXP iterSEXP, SEXP sigmaSEXP, SEXP alphaSEXP, SEXP kappaSEXP, SEXP gSEXP, SEXP hSEXP, SEXP cSEXP, SEXP dSEXP, SEXP limitSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type numk(numkSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< double >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< int >::type limit(limitSEXP);
    __result = Rcpp::wrap(IBPfactormodel(X, numk, iter, sigma, alpha, kappa, g, h, c, d, limit));
    return __result;
END_RCPP
}
// DirichletIBPModel
Rcpp::List DirichletIBPModel(arma::mat X, int K, int iniL, int TruncateL, int iter, int maxK, int nu0, double sigma, double r, double s, double alpha, double alpha2, arma::rowvec mu0, arma::mat Sigma0, int kappa0, double m, double g, double h, double c, double d, double kappa, double s1, double s2, int iter_to_average);
RcppExport SEXP Citrus_DirichletIBPModel(SEXP XSEXP, SEXP KSEXP, SEXP iniLSEXP, SEXP TruncateLSEXP, SEXP iterSEXP, SEXP maxKSEXP, SEXP nu0SEXP, SEXP sigmaSEXP, SEXP rSEXP, SEXP sSEXP, SEXP alphaSEXP, SEXP alpha2SEXP, SEXP mu0SEXP, SEXP Sigma0SEXP, SEXP kappa0SEXP, SEXP mSEXP, SEXP gSEXP, SEXP hSEXP, SEXP cSEXP, SEXP dSEXP, SEXP kappaSEXP, SEXP s1SEXP, SEXP s2SEXP, SEXP iter_to_averageSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type iniL(iniLSEXP);
    Rcpp::traits::input_parameter< int >::type TruncateL(TruncateLSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< int >::type maxK(maxKSEXP);
    Rcpp::traits::input_parameter< int >::type nu0(nu0SEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha2(alpha2SEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sigma0(Sigma0SEXP);
    Rcpp::traits::input_parameter< int >::type kappa0(kappa0SEXP);
    Rcpp::traits::input_parameter< double >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< double >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< double >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< int >::type iter_to_average(iter_to_averageSEXP);
    __result = Rcpp::wrap(DirichletIBPModel(X, K, iniL, TruncateL, iter, maxK, nu0, sigma, r, s, alpha, alpha2, mu0, Sigma0, kappa0, m, g, h, c, d, kappa, s1, s2, iter_to_average));
    return __result;
END_RCPP
}
// DirichletSpikePLSModel
Rcpp::List DirichletSpikePLSModel(arma::mat Y, arma::mat X, int k1, int K, int iniL, int TruncateL, int iter, int nu0, double sigma, double r, double s, double alpha, arma::rowvec mu0, arma::mat Sigma0, int kappa0, double m, double g, double c, double d, double diagH, double h1, double h2, double s1, double s2, int iter_to_average);
RcppExport SEXP Citrus_DirichletSpikePLSModel(SEXP YSEXP, SEXP XSEXP, SEXP k1SEXP, SEXP KSEXP, SEXP iniLSEXP, SEXP TruncateLSEXP, SEXP iterSEXP, SEXP nu0SEXP, SEXP sigmaSEXP, SEXP rSEXP, SEXP sSEXP, SEXP alphaSEXP, SEXP mu0SEXP, SEXP Sigma0SEXP, SEXP kappa0SEXP, SEXP mSEXP, SEXP gSEXP, SEXP cSEXP, SEXP dSEXP, SEXP diagHSEXP, SEXP h1SEXP, SEXP h2SEXP, SEXP s1SEXP, SEXP s2SEXP, SEXP iter_to_averageSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type k1(k1SEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type iniL(iniLSEXP);
    Rcpp::traits::input_parameter< int >::type TruncateL(TruncateLSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< int >::type nu0(nu0SEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sigma0(Sigma0SEXP);
    Rcpp::traits::input_parameter< int >::type kappa0(kappa0SEXP);
    Rcpp::traits::input_parameter< double >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type diagH(diagHSEXP);
    Rcpp::traits::input_parameter< double >::type h1(h1SEXP);
    Rcpp::traits::input_parameter< double >::type h2(h2SEXP);
    Rcpp::traits::input_parameter< double >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< double >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< int >::type iter_to_average(iter_to_averageSEXP);
    __result = Rcpp::wrap(DirichletSpikePLSModel(Y, X, k1, K, iniL, TruncateL, iter, nu0, sigma, r, s, alpha, mu0, Sigma0, kappa0, m, g, c, d, diagH, h1, h2, s1, s2, iter_to_average));
    return __result;
END_RCPP
}
// PLSIBPfactormodel
Rcpp::List PLSIBPfactormodel(arma::mat Y, arma::mat X, int k1, int k2, int iter, double sigma, double alpha, double kappa, double diagH, double g, double h1, double h2, double c, double d, int limit);
RcppExport SEXP Citrus_PLSIBPfactormodel(SEXP YSEXP, SEXP XSEXP, SEXP k1SEXP, SEXP k2SEXP, SEXP iterSEXP, SEXP sigmaSEXP, SEXP alphaSEXP, SEXP kappaSEXP, SEXP diagHSEXP, SEXP gSEXP, SEXP h1SEXP, SEXP h2SEXP, SEXP cSEXP, SEXP dSEXP, SEXP limitSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type k1(k1SEXP);
    Rcpp::traits::input_parameter< int >::type k2(k2SEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< double >::type diagH(diagHSEXP);
    Rcpp::traits::input_parameter< double >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type h1(h1SEXP);
    Rcpp::traits::input_parameter< double >::type h2(h2SEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< int >::type limit(limitSEXP);
    __result = Rcpp::wrap(PLSIBPfactormodel(Y, X, k1, k2, iter, sigma, alpha, kappa, diagH, g, h1, h2, c, d, limit));
    return __result;
END_RCPP
}
// DirichletIBPPLSModel
Rcpp::List DirichletIBPPLSModel(arma::mat Y, arma::mat X, int k1, int K, int iniL, int TruncateL, int iter, int maxK, int nu0, double sigma, double r, double s, double alpha, double alpha2, arma::rowvec mu0, arma::mat Sigma0, int kappa0, double m, double g, double c, double d, double kappa, double diagH, double h1, double h2, double s1, double s2, int iter_to_average);
RcppExport SEXP Citrus_DirichletIBPPLSModel(SEXP YSEXP, SEXP XSEXP, SEXP k1SEXP, SEXP KSEXP, SEXP iniLSEXP, SEXP TruncateLSEXP, SEXP iterSEXP, SEXP maxKSEXP, SEXP nu0SEXP, SEXP sigmaSEXP, SEXP rSEXP, SEXP sSEXP, SEXP alphaSEXP, SEXP alpha2SEXP, SEXP mu0SEXP, SEXP Sigma0SEXP, SEXP kappa0SEXP, SEXP mSEXP, SEXP gSEXP, SEXP cSEXP, SEXP dSEXP, SEXP kappaSEXP, SEXP diagHSEXP, SEXP h1SEXP, SEXP h2SEXP, SEXP s1SEXP, SEXP s2SEXP, SEXP iter_to_averageSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type k1(k1SEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type iniL(iniLSEXP);
    Rcpp::traits::input_parameter< int >::type TruncateL(TruncateLSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< int >::type maxK(maxKSEXP);
    Rcpp::traits::input_parameter< int >::type nu0(nu0SEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha2(alpha2SEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sigma0(Sigma0SEXP);
    Rcpp::traits::input_parameter< int >::type kappa0(kappa0SEXP);
    Rcpp::traits::input_parameter< double >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< double >::type diagH(diagHSEXP);
    Rcpp::traits::input_parameter< double >::type h1(h1SEXP);
    Rcpp::traits::input_parameter< double >::type h2(h2SEXP);
    Rcpp::traits::input_parameter< double >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< double >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< int >::type iter_to_average(iter_to_averageSEXP);
    __result = Rcpp::wrap(DirichletIBPPLSModel(Y, X, k1, K, iniL, TruncateL, iter, maxK, nu0, sigma, r, s, alpha, alpha2, mu0, Sigma0, kappa0, m, g, c, d, kappa, diagH, h1, h2, s1, s2, iter_to_average));
    return __result;
END_RCPP
}
// factorEM
Rcpp::List factorEM(arma::mat X, arma::mat Y, int k, int iter);
RcppExport SEXP Citrus_factorEM(SEXP XSEXP, SEXP YSEXP, SEXP kSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    __result = Rcpp::wrap(factorEM(X, Y, k, iter));
    return __result;
END_RCPP
}
// PLSfactorEM
Rcpp::List PLSfactorEM(arma::mat X, arma::mat Y, int k1, int k2, int iter);
RcppExport SEXP Citrus_PLSfactorEM(SEXP XSEXP, SEXP YSEXP, SEXP k1SEXP, SEXP k2SEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type k1(k1SEXP);
    Rcpp::traits::input_parameter< int >::type k2(k2SEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    __result = Rcpp::wrap(PLSfactorEM(X, Y, k1, k2, iter));
    return __result;
END_RCPP
}
// NaivePCA
Rcpp::List NaivePCA(arma::mat X, arma::mat Y, int k1, int k2);
RcppExport SEXP Citrus_NaivePCA(SEXP XSEXP, SEXP YSEXP, SEXP k1SEXP, SEXP k2SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type k1(k1SEXP);
    Rcpp::traits::input_parameter< int >::type k2(k2SEXP);
    __result = Rcpp::wrap(NaivePCA(X, Y, k1, k2));
    return __result;
END_RCPP
}
// PLSinitilization
Rcpp::List PLSinitilization(arma::mat Y, arma::mat X, int k1, int k2);
RcppExport SEXP Citrus_PLSinitilization(SEXP YSEXP, SEXP XSEXP, SEXP k1SEXP, SEXP k2SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type k1(k1SEXP);
    Rcpp::traits::input_parameter< int >::type k2(k2SEXP);
    __result = Rcpp::wrap(PLSinitilization(Y, X, k1, k2));
    return __result;
END_RCPP
}
// callLasso
arma::vec callLasso(arma::mat Y, arma::mat X, arma::mat D, double lam);
RcppExport SEXP Citrus_callLasso(SEXP YSEXP, SEXP XSEXP, SEXP DSEXP, SEXP lamSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type D(DSEXP);
    Rcpp::traits::input_parameter< double >::type lam(lamSEXP);
    __result = Rcpp::wrap(callLasso(Y, X, D, lam));
    return __result;
END_RCPP
}
// PLSfactorEMpenalty
Rcpp::List PLSfactorEMpenalty(arma::mat Y, arma::mat X, int k1, int k2, int iter, arma::mat lambda_y, arma::mat lambda_x, arma::mat lambda_u, double lam, double tol);
RcppExport SEXP Citrus_PLSfactorEMpenalty(SEXP YSEXP, SEXP XSEXP, SEXP k1SEXP, SEXP k2SEXP, SEXP iterSEXP, SEXP lambda_ySEXP, SEXP lambda_xSEXP, SEXP lambda_uSEXP, SEXP lamSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type k1(k1SEXP);
    Rcpp::traits::input_parameter< int >::type k2(k2SEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type lambda_y(lambda_ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type lambda_x(lambda_xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type lambda_u(lambda_uSEXP);
    Rcpp::traits::input_parameter< double >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    __result = Rcpp::wrap(PLSfactorEMpenalty(Y, X, k1, k2, iter, lambda_y, lambda_x, lambda_u, lam, tol));
    return __result;
END_RCPP
}
// floss
float floss(arma::mat X, arma::mat Y);
RcppExport SEXP Citrus_floss(SEXP XSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    __result = Rcpp::wrap(floss(X, Y));
    return __result;
END_RCPP
}
// InNotIn
Rcpp::List InNotIn(arma::vec x, int n);
RcppExport SEXP Citrus_InNotIn(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    __result = Rcpp::wrap(InNotIn(x, n));
    return __result;
END_RCPP
}
// PLSfactorEMpenaltyTrain
Rcpp::List PLSfactorEMpenaltyTrain(arma::mat Y, arma::mat X, int k1, int k2, int iter, arma::vec penalty, double tol);
RcppExport SEXP Citrus_PLSfactorEMpenaltyTrain(SEXP YSEXP, SEXP XSEXP, SEXP k1SEXP, SEXP k2SEXP, SEXP iterSEXP, SEXP penaltySEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type k1(k1SEXP);
    Rcpp::traits::input_parameter< int >::type k2(k2SEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type penalty(penaltySEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    __result = Rcpp::wrap(PLSfactorEMpenaltyTrain(Y, X, k1, k2, iter, penalty, tol));
    return __result;
END_RCPP
}
// CountSparsity
arma::vec CountSparsity(arma::mat X);
RcppExport SEXP Citrus_CountSparsity(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    __result = Rcpp::wrap(CountSparsity(X));
    return __result;
END_RCPP
}
// PLSfactorEMpenaltyCVonefold
Rcpp::List PLSfactorEMpenaltyCVonefold(arma::mat trainingY, arma::mat trainingX, arma::mat tuneY, arma::mat tuneX, int k1, int k2, int iter, arma::vec penalty, double tol);
RcppExport SEXP Citrus_PLSfactorEMpenaltyCVonefold(SEXP trainingYSEXP, SEXP trainingXSEXP, SEXP tuneYSEXP, SEXP tuneXSEXP, SEXP k1SEXP, SEXP k2SEXP, SEXP iterSEXP, SEXP penaltySEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type trainingY(trainingYSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type trainingX(trainingXSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type tuneY(tuneYSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type tuneX(tuneXSEXP);
    Rcpp::traits::input_parameter< int >::type k1(k1SEXP);
    Rcpp::traits::input_parameter< int >::type k2(k2SEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type penalty(penaltySEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    __result = Rcpp::wrap(PLSfactorEMpenaltyCVonefold(trainingY, trainingX, tuneY, tuneX, k1, k2, iter, penalty, tol));
    return __result;
END_RCPP
}
// PLSfactorEMpenaltyNfoldCV
Rcpp::List PLSfactorEMpenaltyNfoldCV(arma::mat Y, arma::mat X, int k1, int k2, int iter, int kfold, arma::vec penalty, double tol);
RcppExport SEXP Citrus_PLSfactorEMpenaltyNfoldCV(SEXP YSEXP, SEXP XSEXP, SEXP k1SEXP, SEXP k2SEXP, SEXP iterSEXP, SEXP kfoldSEXP, SEXP penaltySEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type k1(k1SEXP);
    Rcpp::traits::input_parameter< int >::type k2(k2SEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< int >::type kfold(kfoldSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type penalty(penaltySEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    __result = Rcpp::wrap(PLSfactorEMpenaltyNfoldCV(Y, X, k1, k2, iter, kfold, penalty, tol));
    return __result;
END_RCPP
}
// PLSfactorEMpenaltyGivenPen
Rcpp::List PLSfactorEMpenaltyGivenPen(arma::mat Y, arma::mat X, int k1, int k2, int iter, double pen, double tol);
RcppExport SEXP Citrus_PLSfactorEMpenaltyGivenPen(SEXP YSEXP, SEXP XSEXP, SEXP k1SEXP, SEXP k2SEXP, SEXP iterSEXP, SEXP penSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type k1(k1SEXP);
    Rcpp::traits::input_parameter< int >::type k2(k2SEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double >::type pen(penSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    __result = Rcpp::wrap(PLSfactorEMpenaltyGivenPen(Y, X, k1, k2, iter, pen, tol));
    return __result;
END_RCPP
}
// EM_for_one_chunk
Rcpp::List EM_for_one_chunk(arma::mat W, arma::mat lambda, arma::mat psi, int k1, int k2, int p, arma::mat E_Z_w, arma::mat Var_Z_w);
RcppExport SEXP Citrus_EM_for_one_chunk(SEXP WSEXP, SEXP lambdaSEXP, SEXP psiSEXP, SEXP k1SEXP, SEXP k2SEXP, SEXP pSEXP, SEXP E_Z_wSEXP, SEXP Var_Z_wSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type W(WSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< int >::type k1(k1SEXP);
    Rcpp::traits::input_parameter< int >::type k2(k2SEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type E_Z_w(E_Z_wSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Var_Z_w(Var_Z_wSEXP);
    __result = Rcpp::wrap(EM_for_one_chunk(W, lambda, psi, k1, k2, p, E_Z_w, Var_Z_w));
    return __result;
END_RCPP
}
// PLSfactorEMchunk
Rcpp::List PLSfactorEMchunk(arma::mat X, arma::mat Y, int k1, int k2, int iter, double chunk);
RcppExport SEXP Citrus_PLSfactorEMchunk(SEXP XSEXP, SEXP YSEXP, SEXP k1SEXP, SEXP k2SEXP, SEXP iterSEXP, SEXP chunkSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type k1(k1SEXP);
    Rcpp::traits::input_parameter< int >::type k2(k2SEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double >::type chunk(chunkSEXP);
    __result = Rcpp::wrap(PLSfactorEMchunk(X, Y, k1, k2, iter, chunk));
    return __result;
END_RCPP
}
